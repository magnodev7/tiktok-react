#!/usr/bin/env python3
"""
Script de teste para o sistema de autentica√ß√£o em Docker
"""

import requests
import json
import sys
import time
from pathlib import Path

def wait_for_service(url, timeout=60):
    """Aguarda o servi√ßo ficar dispon√≠vel"""
    print(f"‚è≥ Aguardando servi√ßo em {url}...")
    
    for i in range(timeout):
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ Servi√ßo dispon√≠vel ap√≥s {i+1} segundos")
                return True
        except requests.exceptions.RequestException:
            pass
        
        time.sleep(1)
        if i % 10 == 0 and i > 0:
            print(f"   Aguardando... ({i}/{timeout}s)")
    
    print(f"‚ùå Servi√ßo n√£o ficou dispon√≠vel em {timeout} segundos")
    return False

def test_docker_auth_system():
    """Testa o sistema de autentica√ß√£o em Docker"""
    base_url = "http://localhost:8082"
    
    print("üß™ Testando sistema de autentica√ß√£o em Docker...")
    print("=" * 50)
    
    # Aguarda o servi√ßo ficar dispon√≠vel
    if not wait_for_service(f"{base_url}/health"):
        print("‚ùå Servi√ßo n√£o est√° rodando. Execute: docker compose up --build")
        return False
    
    # Teste 1: Health check
    print("\n1. Testando health check...")
    try:
        response = requests.get(f"{base_url}/health")
        if response.status_code == 200:
            print("‚úÖ Health check OK")
        else:
            print(f"‚ùå Health check falhou: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro no health check: {e}")
        return False
    
    # Teste 2: Tentar acessar rota protegida sem autentica√ß√£o
    print("\n2. Testando acesso sem autentica√ß√£o...")
    try:
        response = requests.get(f"{base_url}/videos")
        if response.status_code == 401:
            print("‚úÖ Rota protegida corretamente")
        else:
            print(f"‚ùå Rota n√£o est√° protegida: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao testar rota protegida: {e}")
    
    # Teste 3: Login com credenciais padr√£o
    print("\n3. Testando login...")
    try:
        login_data = {
            "username": "admin",
            "password": "admin123"
        }
        response = requests.post(f"{base_url}/auth/login", json=login_data)
        
        if response.status_code == 200:
            data = response.json()
            token = data.get("access_token")
            if token:
                print("‚úÖ Login realizado com sucesso")
                print(f"   Token recebido: {token[:20]}...")
            else:
                print("‚ùå Token n√£o recebido")
                return False
        else:
            print(f"‚ùå Login falhou: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro no login: {e}")
        return False
    
    # Teste 4: Acessar rota protegida com token
    print("\n4. Testando acesso com token...")
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{base_url}/videos", headers=headers)
        
        if response.status_code == 200:
            print("‚úÖ Acesso autorizado funcionando")
        else:
            print(f"‚ùå Acesso autorizado falhou: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao testar acesso autorizado: {e}")
    
    # Teste 5: Verificar informa√ß√µes do usu√°rio
    print("\n5. Testando informa√ß√µes do usu√°rio...")
    try:
        response = requests.get(f"{base_url}/auth/me", headers=headers)
        
        if response.status_code == 200:
            user_data = response.json()
            print("‚úÖ Informa√ß√µes do usu√°rio obtidas")
            print(f"   Usu√°rio: {user_data.get('username')}")
            print(f"   Admin: {user_data.get('is_admin')}")
        else:
            print(f"‚ùå Falha ao obter informa√ß√µes do usu√°rio: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao obter informa√ß√µes do usu√°rio: {e}")
    
    # Teste 6: Verificar persist√™ncia de dados
    print("\n6. Testando persist√™ncia de dados...")
    users_dir = Path("users")
    if users_dir.exists():
        users_file = users_dir / "users.json"
        if users_file.exists():
            print("‚úÖ Arquivo de usu√°rios persistido")
            try:
                with open(users_file, 'r') as f:
                    users_data = json.load(f)
                    print(f"   Usu√°rios encontrados: {len(users_data)}")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao ler arquivo de usu√°rios: {e}")
        else:
            print("‚ö†Ô∏è  Arquivo de usu√°rios n√£o encontrado")
    else:
        print("‚ö†Ô∏è  Diret√≥rio de usu√°rios n√£o encontrado")
    
    print("\n" + "=" * 50)
    print("üéâ Testes conclu√≠dos!")
    print("\nPara testar manualmente:")
    print("1. Acesse: http://localhost:8082/login")
    print("2. Use: admin / admin123")
    print("3. Navegue pelo painel")
    
    return True

def check_docker_status():
    """Verifica se o Docker est√° rodando"""
    print("üê≥ Verificando status do Docker...")
    
    try:
        import subprocess
        result = subprocess.run(['docker', 'ps'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker est√° rodando")
            
            # Verifica se os containers est√£o rodando
            if 'tiktok-app' in result.stdout:
                print("‚úÖ Container tiktok-app est√° rodando")
            else:
                print("‚ö†Ô∏è  Container tiktok-app n√£o encontrado")
                
            if 'tiktok-chrome' in result.stdout:
                print("‚úÖ Container tiktok-chrome est√° rodando")
            else:
                print("‚ö†Ô∏è  Container tiktok-chrome n√£o encontrado")
                
            return True
        else:
            print("‚ùå Docker n√£o est√° rodando ou n√£o est√° acess√≠vel")
            return False
    except FileNotFoundError:
        print("‚ùå Docker n√£o est√° instalado")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar Docker: {e}")
        return False

def main():
    print("üê≥ Teste do Sistema de Autentica√ß√£o TikTok Scheduler (Docker)")
    print("=" * 70)
    
    # Verifica Docker
    if not check_docker_status():
        print("\n‚ùå Docker n√£o est√° funcionando. Execute:")
        print("   docker compose up --build")
        sys.exit(1)
    
    # Verifica depend√™ncias
    try:
        import requests
        print("‚úÖ requests instalado")
    except ImportError:
        print("‚ùå requests n√£o instalado. Execute: pip install requests")
        sys.exit(1)
    
    # Executa testes
    if test_docker_auth_system():
        print("\n‚úÖ Todos os testes passaram!")
        print("\nüé¨ Sistema TikTok Scheduler com autentica√ß√£o funcionando perfeitamente!")
    else:
        print("\n‚ùå Alguns testes falharam")
        print("\nüîß Verifique:")
        print("1. Se os containers est√£o rodando: docker ps")
        print("2. Se o arquivo .env est√° configurado")
        print("3. Se as portas 8082 e 4444 est√£o livres")
        sys.exit(1)

if __name__ == "__main__":
    main()
